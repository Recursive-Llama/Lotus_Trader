# CTP Configuration
# Conditional Trading Planner module configuration

# Module Settings
module:
  name: "conditional_trading_planner"
  version: "2.0.0"
  description: "Conditional Trading Strategy Intelligence Engine"

# Learning System Integration
learning_system:
  # Reuse CIL learning infrastructure
  reuse_cil_components: true
  
  # CTP-specific settings
  target_strand_kind: "trade_outcome"
  min_cluster_size: 3
  braid_level_progression: true
  
  # Cluster types for trade outcomes
  cluster_types:
    - "pattern_timeframe"
    - "asset" 
    - "timeframe"
    - "outcome"
    - "pattern"
    - "group_type"
    - "method"

# Conditional Trading Plan Generation
conditional_plans:
  # Plan creation settings
  min_confidence_threshold: 0.7
  min_pattern_count: 2
  max_plans_per_pattern: 5
  
  # Risk scoring (calculated by code, not LLM)
  risk_scoring:
    pattern_reliability_weight: 0.3
    success_rate_weight: 0.3
    statistical_significance_weight: 0.2
    regime_compatibility_weight: 0.2
  
  # Leverage calculation (calculated by code, not LLM)
  leverage_calculation:
    min_leverage: 1
    max_leverage: 5
    base_multiplier: 3.0
  
  # Plan splitting strategy
  plan_splitting:
    split_by_pattern_type: true
    split_by_timeframe: true
    split_by_asset: true
    split_by_market_regime: true
    keep_entry_exit_together: true
  
  # Plan types
  plan_types:
    - "conditional_entry_exit"
    - "conditional_management"
    - "conditional_risk_management"
    - "regime_adaptive"

# LLM Integration
llm:
  # CTP-specific prompts (conditional logic only, not mathematical scores)
  prompts:
    conditional_plan_generation: |
      Create a conditional trading plan based on this pattern analysis:
      
      PATTERN: {pattern_info}
      HISTORICAL PERFORMANCE: {historical_performance}
      
      Generate conditional logic in this format:
      "If [pattern conditions], then:
      - [entry action with relative positioning]
      - [management rules with conditions]
      - [exit conditions with triggers]"
      
      Focus on:
      1. Conditional logic only (no specific prices)
      2. Relative positioning (2% below, 3% above, etc.)
      3. Management rules (if X happens, do Y)
      4. Exit conditions (when to exit, when to stop)
      
      Do NOT include:
      - Specific prices or amounts
      - Risk scores or leverage (calculated by code)
      - Mathematical calculations
      
      Provide clear, actionable conditional logic only.
    
    trade_outcome_analysis: |
      Analyze this cluster of trade outcomes and extract conditional trading insights:
      
      CLUSTER: {cluster_key}
      SUCCESS RATE: {success_rate:.2%}
      AVG RETURN: {avg_return:.2%}
      AVG DURATION: {avg_duration:.1f} hours
      
      TRADE OUTCOMES:
      {trade_outcome_details}
      
      Focus on:
      1. What conditional logic led to success vs failure?
      2. How can we improve conditional entry/exit rules?
      3. What conditional management rules should we add/modify?
      4. What market conditions should we avoid?
      5. How can we optimize conditional risk management?
      
      Provide specific, actionable insights for improving conditional trading strategies.

# Performance Monitoring
monitoring:
  # Success metrics
  success_metrics:
    plan_success_rate: 0.55
    avg_rr_ratio: 2.0
    plan_adoption_rate: 0.80
  
  # Performance thresholds
  performance_thresholds:
    plan_generation_time: 5  # seconds
    learning_cycle_time: 30  # seconds
    max_memory_usage: "512MB"
  
  # Alerting
  alerts:
    low_success_rate: true
    high_generation_time: true
    learning_system_errors: true

# Database Integration
database:
  # Strand kinds
  strand_kinds:
    input: "prediction_review"
    output: "conditional_trading_plan"
    learning_input: "trade_outcome"
    learning_output: "trade_outcome"  # with braid_level > 1
  
  # Data flow
  data_flow:
    rdi_output: "pattern"
    cil_input: "pattern"
    cil_output: "prediction_review"
    ctp_input: "prediction_review"
    ctp_output: "conditional_trading_plan"
    dm_input: "conditional_trading_plan"
    dm_output: "trading_decision"
    trader_input: "trading_decision"
    trader_output: "trade_outcome"
  
  # Query settings
  query_settings:
    max_historical_days: 90
    batch_size: 100
    timeout_seconds: 30

# Error Handling
error_handling:
  # LLM retry settings
  llm_retry:
    max_attempts: 3
    timeout_seconds: 30
    backoff_multiplier: 2
  
  # Fallback strategies
  fallbacks:
    basic_plan_generation: true
    skip_failed_clusters: true
    use_cached_insights: true
  
  # Logging
  logging:
    level: "INFO"
    log_llm_calls: true
    log_performance_metrics: true
